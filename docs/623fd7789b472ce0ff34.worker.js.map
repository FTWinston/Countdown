{"version":3,"sources":["../webpack/bootstrap 623fd7789b472ce0ff34","NumbersWorker.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","target","numbers","__webpack_exports__","writeExpression","bestValue","bestDistance","bestSolution","Operator","text","displayLinear","action","this","operators","a","b","val","solve","targetVal","useNumbers","forEachPermutation","items","permutation","size","forEach","length","item","push","splice","pop","applyOperatorPositionPermutations","testSolution","result","solution","firstUnusedSolutionElement","distance","Math","abs","writtenSolution","slice","isOperatorPositionPermutationValid","numElements","positions","stackSize","evalPos","_i","positions_1","nextOperatorPos","getValidOperatorPositionPermutations","numNumbers","numOperators","validPositions","getNumberPermutations","data","startIndex","endIndex","currentIndex","combinationSize","gotPermuation","values","operatorPositionPermutations_1","operatorIndices","expression","_a","operatorIndices_1","index","applyOperatorPermutations","operatorNum","lastLevel","operators_1","operator","testSolve","postfix","stack","firstUnusedElement","postfix_1","element","operand2","operand1","self","onmessage","e","msg","postMessage","InfixOperation","toString","multiplication","subtraction","firstUsedElement","postfix_2","firstOperandIndex","bracketNeeded","operation","join","operand","isSecondOperand"],"mappings":"aACA,IAAAA,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,IACAG,EAAAH,EACAI,GAAA,EACAH,YAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAZ,EAAAmB,EAAA,SAAAhB,GACA,IAAAS,EAAAT,KAAAiB,WACA,WAA2B,OAAAjB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAQ,EAAAC,GAAsD,OAAAR,OAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDtB,EAAAyB,EAAA,IAGAzB,IAAA0B,EAAA,kCCpDA,IAAIC,EACAC,qLAVJC,EAAA,gBAAAC,EAWA,IAAIC,GAAqB,EACrBC,EAAe,MACfC,EAAuB,GAE3BC,EAAA,WAIA,OAHI,SAA4BC,EAA8BC,EAAwCC,GAAtEC,KAAAH,OAA8BG,KAAAF,gBAAwCE,KAAAD,UADtG,GAwDO,IAAME,GACT,IAAIL,EAAS,KAAK,EAjDtB,SAAaM,EAAWC,GACpB,OAAID,EAAIC,EACG,KAGJD,EAAIC,IA6CX,IAAIP,EAAS,KAAK,EA1CtB,SAAkBM,EAAWC,GACzB,IAAMC,EAAMF,EAAIC,EAEhB,OAAIC,IAAQD,EACD,KAGPC,GAAO,EACA,KAGJA,IAgCP,IAAIR,EAAS,KAAK,EA7BtB,SAAkBM,EAAWC,GACzB,OAAID,EAAIC,EACG,KAGD,IAANA,EACO,KAGJD,EAAIC,IAqBX,IAAIP,EAAS,QAAK,EAlBtB,SAAgBM,EAAWC,GACvB,GAAU,IAANA,EACA,OAAO,KAGX,IAzDWtB,EAyDLuB,EAAMF,EAAIC,EAEhB,OA3DWtB,EA2DAuB,IA1DC,IAAMvB,EA2DP,KAGJuB,KAuBL,SAAAC,EAAgBC,EAAmBC,GAMrC,OALAlB,EAASiB,EA4Bb,SAAAE,EAA+BC,EAAYC,EAAkBC,EAAcC,GACnEF,EAAYG,SAAWF,GACvBC,EAAQF,GAGZ,IAAK,IAAI5C,EAAI,EAAGA,EAAI2C,EAAMI,OAAQ/C,IAAK,CACnC,IAAMgD,EAAOL,EAAM3C,GACnB4C,EAAYK,KAAKD,GACjBL,EAAMO,OAAOlD,EAAG,GAEhB0C,EAAmBC,EAAOC,EAAaC,EAAMC,GAE7CH,EAAMO,OAAOlD,EAAG,EAAGgD,GACnBJ,EAAYO,OAtChBT,CAFAlB,EAAUiB,KAEsBjB,EAAQuB,OAAQK,IAExCzB,EAAWE,GAGvB,SAAAwB,EAAsBC,EAAgBC,EAAsBC,GACxD,IAAMC,EAAWC,KAAKC,IAAIL,EAAS/B,GAEnC,KAAIkC,EAAW7B,GAAf,CAIA,IAEMgC,EAAkBlC,EAFG6B,EAASM,MAAM,EAAGL,IAIzCC,IAAa7B,GAAgBgC,EAAgBb,OAASlB,EAAakB,SAIvEpB,EAAY2B,EACZ1B,EAAe6B,EACf5B,EAAe+B,IAoBb,SAAAE,EAA6CC,EAAqBC,GAIpE,IAHA,IAAIC,EAAY,EACZC,EAAU,EAEgBC,EAAA,EAAAC,EAAAJ,EAAAG,EAAAC,EAAArB,OAAAoB,IAAS,CAAlC,IAAME,EAAeD,EAAAD,GAKtB,GAHAF,GAAaI,EAAkBH,EAC/BA,EAAUG,EAENJ,EAAY,EACZ,OAAO,EAGXA,GAAa,EAGjB,OAAqB,IAAdA,EAGL,SAAAK,EAA+CC,GACjD,IAAMC,EAAeD,EAAa,EAC5BR,EAAcQ,EAAaC,EAK3BC,KAYN,OAGJ,SAAAC,EACIC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,GAAIF,IAAiBC,EAEjB,YADAC,EAAcL,GAIlB,IAAK,IAAI3E,EAAI4E,EAAY5E,GAAK6E,GAAYA,EAAW7E,EAAI,GAAK+E,EAAkBD,EAAc9E,IAC1F2E,EAAKG,GAAgB9E,EACrB0E,EAAsBC,EAAM3E,EAAI,EAAG6E,EAAUC,EAAe,EAAGC,EAAiBC,GAnBpFN,IAdsB,EACDX,EAAc,EAasB,EAAGS,EAAe,EATrD,SAACR,IACnBA,EAAYA,EAAUH,SACZZ,KAAKc,EAAc,GACzBD,EAAmCC,EAAaC,IAChDS,EAAexB,KAAKe,KAMrBS,EAsBX,SAAArB,EAA2C6B,GAGvC,IAFA,IAE8Bd,EAAA,EAAAe,EAFOZ,EAAqCW,EAAOlC,QAEnDoB,EAAAe,EAAAnC,OAAAoB,IAA4B,CAItD,IAJC,IAAMgB,EAAeD,EAAAf,GAChBiB,EAAaH,EAAOpB,QAGNwB,EAAA,EAAAC,EAAAH,EAAAE,EAAAC,EAAAvC,OAAAsC,IAAe,CAA9B,IAAME,EAAKD,EAAAD,GACZD,EAAWlC,OAAOqC,EAAO,GAAI,GAGjCC,EAA0BJ,EAAYD,EAAiBA,EAAgBpC,OAAS,IAIxF,SAAAyC,EAAmCJ,EAAwBD,EAA2BM,GAGlF,IAFA,IAAMC,EAA4B,IAAhBD,EAEKtB,EAAA,EAAAwB,EAAAxD,EAAAgC,EAAAwB,EAAA5C,OAAAoB,IAAS,CAA3B,IAAMyB,EAAQD,EAAAxB,GAEfiB,EADcD,EAAgBM,IACVG,EAEhBF,EACAG,EAAUT,GAGVI,EAA0BJ,EAAYD,EAAiBM,EAAc,IAKjF,SAAAI,EAAmBC,GAEf,GAAuB,IAAnBA,EAAQ/C,OAOZ,IAHA,IAAMgD,KAEFC,EAAqB,EACH7B,EAAA,EAAA8B,EAAAH,EAAA3B,EAAA8B,EAAAlD,OAAAoB,IAAO,CAAxB,IAAM+B,EAAOD,EAAA9B,GAGd,GAFA6B,IAEuB,kBAAZE,EAAX,CAKA,GAAIH,EAAMhD,OAAS,EACf,OAGJ,IAAMoD,EAAWJ,EAAM5C,MACjBiD,EAAWL,EAAM5C,MACjBG,EAAS4C,EAAQjE,OAAOmE,EAAUD,GAExC,GAAe,OAAX7C,EACA,OAGJD,EAAaC,EAAQwC,EAASE,GAE9BD,EAAM9C,KAAKK,QAlBPyC,EAAM9C,KAAKiD,IAnKvBG,KAAKC,UAAY,SAAAC,GACb,IA/EuBC,EA+EjB7B,EAAO4B,EAAE5B,KAEC,cAAZA,EAAK,GACLpC,EAAMoC,EAAK,GAAIA,EAAK,IAEH,YAAZA,EAAK,KApFS6B,GAuFA7E,EAAWE,GAtFfwE,KACRI,YAAYD,KAqQ3B,IAAAE,EAAA,WACI,SAAAA,EAA4B3E,EAA8B6D,GAA9B1D,KAAAH,OAA8BG,KAAA0D,WAM9D,OAHWc,EAAAvF,UAAAwF,SAAP,WACI,OAAOzE,KAAKH,MAEpB2E,EAPA,GASM,SAAAhF,EAA0BoE,GAM5B,IALA,IAAMC,KACAa,EAAiBzE,EAAU,GAC3B0E,EAAc1E,EAAU,GAC1B2E,EAAmBhB,EAAQ/C,OAEToB,EAAA,EAAA4C,EAAAjB,EAAA3B,EAAA4C,EAAAhE,OAAAoB,IAAO,CAAxB,IAAM+B,EAAOa,EAAA5C,GACd,GAAuB,kBAAZ+B,EAAX,CAKA,IAAMN,EAAWM,EAEXC,EAAWJ,EAAM5C,MACjBiD,EAAWL,EAAM5C,MACjB6D,EAAoBjB,EAAMhD,OAC5BiE,EAAoBF,IACpBA,EAAmBE,GAGvB,IAAIjF,EAAOkF,EAAcb,EAAUR,GAAU,GAAU,IAAIQ,EAASrE,KAAI,IAAMqE,EAASrE,KACvFA,GAAQ,IAAI6D,EAAS7D,KAAI,IACzBA,GAAQkF,EAAcd,EAAUP,GAAU,GAAS,IAAIO,EAASpE,KAAI,IAAMoE,EAASpE,KAEnF,IAAMmF,EAAY,IAAIR,EAAe3E,EAAM6D,GAC3CG,EAAM9C,KAAKiE,QAlBPnB,EAAM9C,KAAK,IAAIyD,EAAeR,EAAQS,WAAY,OAyB1D,OAJIG,EAAmB,GACnBf,EAAM7C,OAAO,EAAG4D,GAGbf,EAAMoB,KAAK,KAElB,SAAAF,EAAuBG,EAAyBxB,EAAoByB,GAChE,OAAyB,OAArBD,EAAQxB,aAINA,EAAS5D,eAAkBoF,EAAQxB,SAAS5D,eAC1C4D,IAAagB,GAAkBQ,EAAQxB,WAAagB,OAIxDS,GAAmBzB,IAAaiB,GAAeO,EAAQxB,WAAaiB","file":"623fd7789b472ce0ff34.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 623fd7789b472ce0ff34","function postNumbersResult(msg: [number, string]) {\r\n    const workaround = self as any;\r\n    workaround.postMessage(msg);\r\n}\r\n\r\nfunction isInt(n: number) {\r\n    return n >> 0 === n;\r\n}\r\n\r\nlet target: number;\r\nlet numbers: number[];\r\nlet bestValue: number = -1;\r\nlet bestDistance = 99999;\r\nlet bestSolution: string = '';\r\n\r\nclass Operator {\r\n    constructor(public readonly text: string, public readonly displayLinear: boolean, public readonly action: (a: number, b: number) => number | null) {\r\n\r\n    }\r\n}\r\n\r\nexport type Expression = Array<Operator | number>;\r\n\r\nfunction add(a: number, b: number) {\r\n    if (a < b) {\r\n        return null; // don't do it this way around, it doesn't look pleasant\r\n    }\r\n\r\n    return a + b;\r\n}\r\n\r\nfunction subtract(a: number, b: number) {\r\n    const val = a - b;\r\n    \r\n    if (val === b) {\r\n        return null; // a valid, but pointless operation\r\n    }\r\n    \r\n    if (val <= 0) {\r\n        return null; // not allowed by game rules\r\n    }\r\n\r\n    return val;\r\n}\r\n\r\nfunction multiply(a: number, b: number) {\r\n    if (a < b) {\r\n        return null; // don't do it this way around, it doesn't look pleasant\r\n    }\r\n\r\n    if (b === 1) {\r\n        return null; // a valid, but pointless operation\r\n    }\r\n\r\n    return a * b;\r\n}\r\n\r\nfunction divide(a: number, b: number) {\r\n    if (b === 1) {\r\n        return null; // a valid, but pointless operation\r\n    }\r\n\r\n    const val = a / b;\r\n\r\n    if (!isInt(val)) {\r\n        return null; // not allowed by game rules\r\n    }\r\n    \r\n    return val;\r\n}\r\n\r\nexport const operators: Operator[] = [\r\n    new Operator('+', true, add),\r\n    new Operator('-', true, subtract),\r\n    new Operator('x', false, multiply),\r\n    new Operator('÷', false, divide),\r\n];\r\n\r\nself.onmessage = e => {\r\n    const data = e.data as [string, number, number[]];\r\n\r\n    if (data[0] === 'calculate') {\r\n        solve(data[1], data[2]);\r\n    }\r\n    else if (data[0] === 'respond') {\r\n        // a result is needed NOW\r\n\r\n        postNumbersResult([bestValue, bestSolution]);\r\n    }\r\n}\r\n\r\nexport function solve(targetVal: number, useNumbers: number[]) {\r\n    target = targetVal;\r\n    numbers = useNumbers;\r\n\r\n    forEachPermutation(numbers, [], numbers.length, applyOperatorPositionPermutations);\r\n\r\n    return [bestValue, bestSolution];\r\n}\r\n\r\nfunction testSolution(result: number, solution: Expression, firstUnusedSolutionElement: number) {\r\n    const distance = Math.abs(result - target);\r\n    \r\n    if (distance > bestDistance) {\r\n        return;\r\n    }\r\n\r\n    const solutionExpression = solution.slice(0, firstUnusedSolutionElement); // chop equal amount from start and end?\r\n    \r\n    const writtenSolution = writeExpression(solutionExpression);\r\n\r\n    if (distance === bestDistance && writtenSolution.length > bestSolution.length) {\r\n        return;\r\n    }\r\n\r\n    bestValue = result;\r\n    bestDistance = distance;\r\n    bestSolution = writtenSolution;\r\n}\r\n\r\nfunction forEachPermutation<T>(items: T[], permutation: T[], size: number, forEach: (val: T[]) => void) {\r\n    if (permutation.length === size) {\r\n        forEach(permutation);\r\n    }\r\n\r\n    for (let i = 0; i < items.length; i++) {\r\n        const item = items[i];\r\n        permutation.push(item);\r\n        items.splice(i, 1);\r\n\r\n        forEachPermutation(items, permutation, size, forEach);\r\n\r\n        items.splice(i, 0, item);\r\n        permutation.pop();\r\n    }\r\n}\r\n\r\nexport function isOperatorPositionPermutationValid(numElements: number, positions: number[]) {\r\n    let stackSize = 0;\r\n    let evalPos = 0;\r\n\r\n    for (const nextOperatorPos of positions) {\r\n\r\n        stackSize += nextOperatorPos - evalPos;\r\n        evalPos = nextOperatorPos;\r\n        \r\n        if (stackSize < 2) {\r\n            return false;\r\n        }\r\n\r\n        stackSize -= 2;\r\n    }\r\n\r\n    return stackSize === 0;\r\n}\r\n\r\nexport function getValidOperatorPositionPermutations(numNumbers: number) {\r\n    const numOperators = numNumbers - 1;\r\n    const numElements = numNumbers + numOperators;\r\n\r\n    const firstAddIndex = 2;\r\n    const lastAddIndex = numElements - 2; // we will always add an operator at the end\r\n\r\n    const validPositions: number[][] = [];\r\n\r\n    const gotPermuation = (positions: number[]) => {\r\n        positions = positions.slice();\r\n        positions.push(numElements - 1); // we always add an operator at the end\r\n        if (isOperatorPositionPermutationValid(numElements, positions)) {\r\n            validPositions.push(positions);\r\n        }\r\n    }\r\n\r\n    const data: number[] = [];\r\n    getNumberPermutations(data, firstAddIndex, lastAddIndex, 0, numOperators - 1, gotPermuation);\r\n    return validPositions;\r\n}\r\n\r\nfunction getNumberPermutations(\r\n    data: number[],\r\n    startIndex: number,\r\n    endIndex: number,\r\n    currentIndex: number,\r\n    combinationSize: number,\r\n    gotPermuation: (permutation: number[]) => void\r\n) {\r\n    if (currentIndex === combinationSize) {\r\n        gotPermuation(data);\r\n        return;\r\n    }\r\n\r\n    for (let i = startIndex; i <= endIndex && endIndex - i + 1 >= combinationSize - currentIndex; i++) {\r\n        data[currentIndex] = i;\r\n        getNumberPermutations(data, i + 1, endIndex, currentIndex + 1, combinationSize, gotPermuation);\r\n    }\r\n}\r\n\r\nfunction applyOperatorPositionPermutations(values: number[]) {\r\n    const operatorPositionPermutations = getValidOperatorPositionPermutations(values.length);\r\n\r\n    for (const operatorIndices of operatorPositionPermutations) {\r\n        const expression = values.slice();\r\n\r\n        // put blanks into the expression where the operators will go\r\n        for (const index of operatorIndices) {\r\n            expression.splice(index, 0, -1);\r\n        }\r\n\r\n        applyOperatorPermutations(expression, operatorIndices, operatorIndices.length - 1);\r\n    }\r\n}\r\n\r\nfunction applyOperatorPermutations(expression: Expression, operatorIndices: number[], operatorNum: number) {\r\n    const lastLevel = operatorNum === 0;\r\n\r\n    for (const operator of operators) {\r\n        const index = operatorIndices[operatorNum];\r\n        expression[index] = operator;\r\n\r\n        if (lastLevel) {\r\n            testSolve(expression);\r\n        }\r\n        else {\r\n            applyOperatorPermutations(expression, operatorIndices, operatorNum - 1);\r\n        }\r\n    }\r\n}\r\n\r\nfunction testSolve(postfix: Expression) {\r\n    // solve a postfix expression, testing each step of the way to see if that counts as a solution\r\n    if (postfix.length === 0) {\r\n        return;\r\n    } \r\n\r\n    const stack = [];\r\n\r\n    let firstUnusedElement = 0;\r\n    for (const element of postfix) {\r\n        firstUnusedElement++;\r\n\r\n        if (typeof element === 'number') {\r\n            stack.push(element);\r\n            continue;\r\n        }\r\n\r\n        if (stack.length < 2) {\r\n            return;\r\n        }\r\n\r\n        const operand2 = stack.pop() as number;\r\n        const operand1 = stack.pop() as number;\r\n        const result = element.action(operand1, operand2);\r\n\r\n        if (result === null) {\r\n            return;\r\n        }\r\n\r\n        testSolution(result, postfix, firstUnusedElement);\r\n\r\n        stack.push(result);\r\n    }\r\n}\r\n\r\nclass InfixOperation {\r\n    constructor(public readonly text: string, public readonly operator: Operator | null) {\r\n    }\r\n\r\n    public toString() {\r\n        return this.text;\r\n    }\r\n}\r\n\r\nexport function writeExpression(postfix: Expression) {\r\n    const stack: InfixOperation[] = [];\r\n    const multiplication = operators[2];\r\n    const subtraction = operators[1];\r\n    let firstUsedElement = postfix.length;\r\n\r\n    for (const element of postfix) {\r\n        if (typeof element === 'number') {\r\n            stack.push(new InfixOperation(element.toString(), null));\r\n            continue;\r\n        }\r\n\r\n        const operator = element;\r\n\r\n        const operand2 = stack.pop() as InfixOperation;\r\n        const operand1 = stack.pop() as InfixOperation;\r\n        const firstOperandIndex = stack.length;\r\n        if (firstOperandIndex < firstUsedElement) {\r\n            firstUsedElement = firstOperandIndex;\r\n        }\r\n        \r\n        let text = bracketNeeded(operand1, operator, false) ?  `(${operand1.text})` : operand1.text;\r\n        text += ` ${operator.text} `;\r\n        text += bracketNeeded(operand2, operator, true) ?  `(${operand2.text})` : operand2.text;\r\n\r\n        const operation = new InfixOperation(text, operator);\r\n        stack.push(operation);\r\n    }\r\n\r\n    if (firstUsedElement > 0) {\r\n        stack.splice(0, firstUsedElement);\r\n    }\r\n\r\n    return stack.join(' ');\r\n\r\n    function bracketNeeded(operand: InfixOperation, operator: Operator, isSecondOperand: boolean) {\r\n        if (operand.operator === null) {\r\n            return false;\r\n        }\r\n\r\n        if ((!operator.displayLinear || !operand.operator.displayLinear)\r\n            && (operator !== multiplication || operand.operator !== multiplication)) {\r\n            return true;\r\n        }\r\n\r\n        if (isSecondOperand && operator === subtraction && operand.operator === subtraction) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/NumbersWorker.ts"],"sourceRoot":""}